Distributed System
- A system consisting of a group of machines working in coordination so as to appear as a single coherant system to the end-user.


 Consistency 
- Any read that is happening after a latest write, all the nodes should return the latest value of that write

Availability
- Every available node in the system should respond in a non error format to any read request without guarantee of returning the latest write.

Partition tolerance
- System will be responding to all the read and write even if the comunication channel(or middleware) between nodes is broken( or partitioned).



What is the CAP Theorem
--  also known as brewer's theorem
--  any network shared system wants to have these three propoerties but you can have only 2 at time where partition tolerance is mandatory.


Degrees of consistency and avaiability
What to sacrifice C A  or P?


Tweaking partition tolerance



Consistency Patterns:

1. Strong consistency-  As the name suggests, this is most strict form of data consistency. This model implies that every read operation
should return the last committed operation. If there are N number of node, read operation on any of them should return the latest data.
This also means that all servers needs to be updated synchronously and operation is only considered success, once there is acknowledgment from all the servers.


2. Weak consitency- As the name suggests, this is the least strict form of data consistency. This model implies that different read operations
may or may not return the last committed operation. This suggests that all servers will be updated asynchronously and operation is considered success,
once the server which received the request, acknowledges the persistence. The time between when the write operation happened and when all servers persist 
that data is dependent on lot of factors and this duration is called, inconsistency window. In weak consistency, inconsistency window could range from few
milliseconds to infinite. The reason for “infinite” is that there could be cases when the server which received the data crashed right after persisting
(acknowledging) it but before transmitting it to other servers.

3. Eventual consistency - This is a form of weak consistency model. This model implies that different read operations may or may 
not return the last committed operation. This pattern guarantees that there is a definite inconsistency window. This means
if there are no further updates made on the servers, they will eventually have the same state. Update propagation, throughout the system ,
happens in asynchronous way.
